//Fazer cena enquanto MouseDown
https://stackoverflow.com/questions/34244062/sdl-c-drawing-by-holding-mouse-button/34244095#34244095?newreg=116e9808e3ba4ddcb86ac6a27db35c68
//Renderizar texto
https://stackoverflow.com/questions/22886500/how-to-render-text-in-sdl2
//Dica acerca da static keyword
https://stackoverflow.com/questions/31305717/member-function-with-static-linkage
//FUCKING lecture de como carregar textures
https://www.youtube.com/watch?v=XS3E7Q_5TMg


//Dica acerca de tamanho de janelas
https://stackoverflow.com/questions/15575500/sdl-get-native-screen-resolution
                desiredDelta=1000/fps;
                SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
                SDL_SetRenderTarget(renderer,map);
                SDL_RenderClear(renderer);
                SDL_RenderCopy(renderer,map,NULL,NULL);
                SDL_SetRenderTarget(renderer,effects);
                if(*(trailsSwitch)){
                SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
                SDL_RenderClear(renderer);
                (*trailsSwitch)=0;
                }
                else{
                SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);
                SDL_RenderDrawLine(renderer,startPos.x,startPos.y,endPos.x,endPos.y);

                }
                SDL_RenderCopy(renderer,effects,NULL,NULL);
                SDL_SetRenderTarget(renderer,NULL);







                int x,y,w,h;
                std::cout<<"Insere x de novo obstaculo: \n";
                std::cin>>x;
                std::cout<<"Insere y de novo obstaculo: \n";
                std::cin>>y;
                std::cout<<"Insere width de novo obstaculo: \n";
                std::cin>>w;
                std::cout<<"Insere height de novo obstaculo: \n";
                std::cin>>h;
                SDL_Rect rect=(SDL_Rect){x,y,w,h};
                obstacles.push_back((RectNumberPair){&rect,1});






                    objectValuePair test=(objectValuePair){
                            new Throwable(*mousex,*mousey,50,0,randNumBetZeroAnd(255),randNumBetZeroAnd(255),randNumBetZeroAnd(255),255),
                            0};
                    test.obj->addBox(0,bg);
                    army.push_back(test);
                }








                for(SDL_Rect rect: trail){
                    trail.pop_back();
                }
                for(objectValuePair test: army){
                    army.pop_back();
                }
                for(SDL_Rect rect: trail){
                    trail.pop_back();
                }
                for(RectNumberPair test: obstacles){
                    obstacles.pop_back();
                }






//            trailsSwitch=0,           0
//            collisionsSwitch=0,       1
//            addingNewObstacle=0,      2
//            armyEnabled=1,            3
//            run=1,                    4
//            isJumping=0,              5
//            removeEntities=0,         6
//            addThrowable=0,           7
//            draw=0;                   8





//                desiredDelta=1000/fps;
//                SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
//                SDL_SetRenderTarget(renderer,map);
//                SDL_RenderClear(renderer);
//                SDL_SetRenderTarget(renderer,NULL);
//                SDL_RenderCopy(renderer,map,NULL,NULL);


//
//                    SDL_Color thickLineColor=(SDL_Color){255,0,255,255};
//                    graphicalLib1::drawLineThisThick(40,renderer,thickLineColor,400,400,(*x1),(*y1),1);
//                    SDL_Color triangleColor=(SDL_Color){0,0,255,255};
//                    graphicalLib1::drawWireFrameTriangle(renderer,triangleColor,500,500,200);
//                    SDL_Color polygonColor=(SDL_Color){0,255,255,255};
//                    graphicalLib1::drawWireFrameNAgon(renderer,polygonColor,500,500,100,128,3);



    //        targetPositionMeter->render(renderer);
    ////
    ////        mouse->render(renderer);
    ////
    //
    //        goAwayBox->render(renderer);




        std::cout<<"Mascara do estado: \n";
        printMask(gameState&N_ARMY_MASK);
        std::cout<<"\n";
        std::cout<<"Mascara de army: \n";
        printMask(ARMY_MASK);
        std::cout<<"\n";
        std::cout<<"Correndo: \n";
        std::cout<<OnesAreContained(gameState,RUN_MASK);
        std::cout<<"\n";
        std::cout<<"resultado: \n";
        printMask(gameState);
        std::cout<<"\n "<<OnesAreContained(gameState,RUN_MASK)<<"\n";




     GameState   int         mSpeed=0,
            jSpeed=0,
            gameMode=0,
            x1=0,
            y1=0,
            x3=0,
            y3=0,
            currentJumpTick=0,


      GameVars  int
            floorLevel=300,
            fontSize=10,
            gravity=10,









            Cenas para mostrar em debug


            textBox * mouseSpeedOmeter=new textBox(renderer,currentConstants.fontSize,0,text2->getYPos()+text2->getHeight(),fontPath,255,255,255,255,std::to_string(currentState.mSpeed).std::string::c_str());

            int var=trail.size();
            textBox * particleNumberBox=aux::createTextBoxForVariable(renderer,currentConstants.fontSize,0,mousePositionMeter->getYPos()+mousePositionMeter->getHeight(),fontPath,255,255,255,255,&var,"Numero de particulas: ");

            var=army.size();
            textBox * armySizeBox=aux::createTextBoxForVariable(renderer,currentConstants.fontSize,0,particleNumberBox->getYPos()+particleNumberBox->getHeight(),fontPath,255,255,255,255,&var,"Tamanho de army: ");

            textBox * jumpTickBox=aux::createTextBoxForVariable(renderer,currentConstants.fontSize,0,armySizeBox->getYPos()+armySizeBox->getHeight(),fontPath,255,255,255,255,&currentState.currentJumpTick,"TickAtualDeSalto: ");

            textBox * jSpeedBox=aux::createTextBoxForVariable(renderer,currentConstants.fontSize,0,jumpTickBox->getYPos()+jumpTickBox->getHeight(),fontPath,255,255,255,255,&currentState.jSpeed,"TickAtualDeSalto: ");
            var=counter->getCurrent();
            textBox * counterBox=aux::createTextBoxForVariable(renderer,currentConstants.fontSize,0,jSpeedBox->getYPos()+jSpeedBox->getHeight(),fontPath,255,255,255,255,&var,"Counter: ");



                mouseSpeedOmeter->render(renderer);

                mousePositionMeter->render(renderer);

                particleNumberBox->render(renderer);

                armySizeBox->render(renderer);

                jumpTickBox->render(renderer);

                jSpeedBox->render(renderer);

                counterBox->render(renderer);

                hBox->render(renderer);






            delete(mouseSpeedOmeter);
            delete(particleNumberBox);
            delete(armySizeBox);
            delete(jumpTickBox);
            delete(jSpeedBox);
            delete(counterBox);
